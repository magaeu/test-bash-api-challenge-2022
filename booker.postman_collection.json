{
	"info": {
		"_postman_id": "0836459a-7fc9-4a0d-9ac7-97c4e764ebd8",
		"name": "booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "helpers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('helpers', function helpers() {",
									"",
									"    /**",
									"     * Asserts that the response was successful and has the specified status code",
									"     */",
									"    assertSuccessfulResponse = (response, status) => {",
									"        pm.expect(response).to.be.an('object').and.is.not.empty;",
									"        pm.expect(response).to.be.an('object').and.is.json;",
									"        pm.expect(response.code).to.be.a('number').at.least(200);",
									"        pm.expect(response.code).to.equal(status);",
									"",
									"        let contentType = getHeader(response, 'content-type');",
									"        pm.expect(contentType).to.be.a('string').and.include('application/json');",
									"    };",
									"    ",
									"    /**",
									"     * Asserts that the response was an error and has the specified status code",
									"     */",
									"    assertErrorResponse = (response, status) => {",
									"        pm.expect(response).to.be.an('object');",
									"        pm.expect(response.code).to.be.a('number').at.least(400).and.below(600);",
									"        pm.expect(response.code).to.equal(status);",
									"",
									"        let contentType = getHeader(response, 'content-type');",
									"        pm.expect(contentType).to.be.a('string').and.include('application/json');",
									"    };",
									"    ",
									"    /**",
									"     * Asserts that the response had a specific error message",
									"     */",
									"    assertErrorMsgResponse = (response, msg) => {",
									"        pm.expect(response).to.be.an('object');",
									"        ",
									"        let error = getError(response, 'Error');",
									"        pm.expect(error).to.be.a('string').and.include(msg);",
									"    };",
									"    ",
									"    /**",
									"     * Validates the given object against the JSON Schema",
									"     */",
									"    assertJSONSchema = (data, schema) => {",
									"        pm.expect(schema).to.be.an('object').and.is.not.empty;",
									"        let isValid = tv4.validate(data, schema);",
									"        if (!isValid) {",
									"            throw tv4.error;",
									"        }",
									"    };",
									"    ",
									"    /**",
									"     * Asserts that the response was successful bellow a value",
									"     */",
									"    assertResponseTime = (response, timeValue) => {",
									"        pm.expect(response.responseTime).to.be.a('number').and.be.below(timeValue);",
									"    };",
									"    ",
									"    /**",
									"     * Asserts that the searched item is retrieved",
									"     */",
									"    assertElementIsRetrieve = (response, item) => {",
									"        pm.expect(response).to.be.an('array').and.is.not.empty;",
									"        pm.expect(response).to.deep.equal(item);",
									"    };",
									"    ",
									"     /**",
									"     * Returns the specified response header (case-insensitive)",
									"     */",
									"    getHeader = (response, name) => {",
									"        name = name.toLowerCase();",
									"        let header = response.headers.find(({ key }) => key.toLowerCase() === name);",
									"        if (header) {",
									"            return header.value;",
									"        }",
									"    };",
									"    ",
									"     /**",
									"     * Returns the specified response error msg",
									"     */",
									"    getError = (response, name) => {",
									"        let error = response[name];",
									"        if (error) {",
									"            return error;",
									"        }",
									"    };",
									"    ",
									"} + '; helpers();');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Load the helpers, just to make sure there aren't any errors",
									"eval(pm.environment.get('helpers'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "login",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"eval(pm.environment.get('helpers'));",
									"",
									"pm.test('should response be valid', function () {",
									"    assertSuccessfulResponse(pm.response, 200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "booking",
			"item": [
				{
					"name": "create booking",
					"item": [
						{
							"name": "/create booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('should response be valid', function () {",
											"    assertSuccessfulResponse(pm.response, 200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2022-01-01\",\n        \"checkout\" : \"2022-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}"
								},
								"url": {
									"raw": "{{host}}/booking",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking"
									]
								},
								"description": "Request that allows you to create a Booking within the API. This request creates the booking using JSON."
							},
							"response": []
						}
					]
				},
				{
					"name": "get booking",
					"item": [
						{
							"name": "/get booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('should response be valid', function () {",
											"    assertSuccessfulResponse(pm.response, 200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Request create booking",
											"const createBooking = {",
											"  url: pm.environment.get(\"host\") + \"/booking\",",
											"  method: 'POST',",
											"  header: {",
											"    'Content-Type': 'application/json'",
											"  },",
											"  body: {",
											"    mode: 'application/json',",
											"    raw: JSON.stringify({",
											"    \"firstname\" : \"Sarah\",",
											"    \"lastname\" : \"Brown\",",
											"    \"totalprice\" : 120,",
											"    \"depositpaid\" : true,",
											"    \"bookingdates\" : {",
											"        \"checkin\" : \"2022-01-02\",",
											"        \"checkout\" : \"2022-01-11\"",
											"    },",
											"    \"additionalneeds\" : \"Breakfast\"",
											"})",
											"  }",
											"};",
											"",
											"// Post request to create booking",
											"pm.sendRequest(createBooking, (error, response) => {",
											"  if (error) {",
											"    console.log(error);",
											"  } else {",
											"  console.log(response.json());",
											"  var jsonData = response.json();",
											"  postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/booking/{{bookingId}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingId}}"
									]
								},
								"description": "Requests a specific booking that exists within the API. To get a list of valid booking IDs using GetBookingIds calls."
							},
							"response": []
						}
					]
				}
			]
		}
	]
}